#define FLT_EPSILON 1.19209290E-07F
#define M_PI 3.1415926535897932384626433832795
float PHI = 1.61803398874989484820459;  // Î¦ = Golden Ratio   
#extension GL_EXT_debug_printf : enable

layout (set = 0, binding = 0) buffer images_buf { readonly restrict float images[]; };
layout (set = 0, binding = 1) buffer plane_buf { vec4 plane_hypotheses[]; };
layout (set = 0, binding = 2) buffer costs_buf { float costs[]; };
layout (set = 0, binding = 3) buffer camera_buf { readonly restrict float cameras[]; };
layout (set = 0, binding = 4) buffer random_states_buf {float random_states[]; };
layout (set = 0, binding = 5) buffer selected_views_buf {uint selected_views[]; };
layout (set = 0, binding = 6) buffer depths_buf {float depths[]; };

struct Parameters {
  int max_iterations;
  int patch_size;
  int num_images;
  int radius_increment;
  float sigma_spatial;
  float sigma_color;
  int top_k;
  float depth_min;
  float depth_max;
  bool geom_consistency;
};

layout(push_constant) uniform PushConstants {
    Parameters params;
    int iter;
    float timestamp;
    } pcs;

struct Camera {
  float K[9];
  float R[9];
  float t[3];
  float height;
  float width;
  float depth_min;
  float depth_max;
};

Camera get_camera(int index) {
    // size of camera is 9+9+3+1+1+1+1 = 25
    int cam_size = 9+9+3+(4*1); // arrays + 4 scalars
    int i = index * cam_size;
    Camera result = Camera(
       float[9](cameras[i], cameras[i+1], cameras[i+2], cameras[i+3], cameras[i+4], cameras[i+5], cameras[i+6], cameras[i+7], cameras[i+8]),
       float[9](cameras[i+9], cameras[i+10], cameras[i+11], cameras[i+12], cameras[i+13], cameras[i+14], cameras[i+15], cameras[i+16], cameras[i+17]),
       float[3](cameras[i+18], cameras[i+19], cameras[i+20]),
       cameras[i+21],
       cameras[i+22],
       cameras[i+23],
       cameras[i+24]
    );
    return result;
}

// from https://stackoverflow.com/a/28095165
float rand(){
    // TODO: don't load camera every time
    Camera cam0 = get_camera(0);
    vec2 xy = gl_GlobalInvocationID.xy;
    int rd_idx = int(xy.y * cam0.width + xy.x);
    float seed = random_states[rd_idx];
    xy += 1; // if xy.x == 0, we always get 0 as an end result and get stuck in a while loop
    float tmp = fract(tan(distance(xy*PHI, xy)*seed)*xy.x);
    random_states[rd_idx] = seed + 1; // if next seed is 0, we always generate 0
    return tmp;
    // return fract(sin(dot(center.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

int image_offset(int image_idx){
    int offset = 0;
    for(int i = 0; i < image_idx; i++){
        Camera camera = get_camera(i);
        int width = int(camera.width);
        int height = int(camera.height);
        offset += width*height;
    }
    return offset;
}

float get_pixel_from_image(int image_idx, ivec2 p){
    Camera camera = get_camera(image_idx);
    int offset = image_offset(image_idx);
    p = max(ivec2(0, 0), p);
    p = min(ivec2(camera.width, camera.height), p);
    offset += p.y * int(camera.width) + p.x;
    return images[offset];
}

float get_pixel_from_image(int image_idx, vec2 p){
    return get_pixel_from_image(image_idx, ivec2(p.x+0.5, p.y+0.5));
}

float[32] init_array(float value) {
    float arr[32];
    arr[0] = value;
    for (int i = 1; i < 32; ++i) {
        arr[i] = 0.0;
    }
    return arr;
}

bool[8] init_flags(bool value){
    bool arr[8];
    arr[0] = value;
    for (int i = 1; i < 32; ++i) {
        arr[i] = false;
    }
    return arr;
}

vec2 ComputeCorrespondingPoint(const float[9] H, const ivec2 p)
{
    vec3 pt;
    pt.x = H[0] * p.x + H[1] * p.y + H[2];
    pt.y = H[3] * p.x + H[4] * p.y + H[5];
    pt.z = H[6] * p.x + H[7] * p.y + H[8];
    return vec2(pt.x / pt.z, pt.y / pt.z);
}

float[9] ComputeHomography(const Camera ref_camera, const Camera src_camera, const vec4 plane_hypothesis)
{
    float[9] H;

    float ref_C[3];
    float src_C[3];
    ref_C[0] = -(ref_camera.R[0] * ref_camera.t[0] + ref_camera.R[3] * ref_camera.t[1] + ref_camera.R[6] * ref_camera.t[2]);
    ref_C[1] = -(ref_camera.R[1] * ref_camera.t[0] + ref_camera.R[4] * ref_camera.t[1] + ref_camera.R[7] * ref_camera.t[2]);
    ref_C[2] = -(ref_camera.R[2] * ref_camera.t[0] + ref_camera.R[5] * ref_camera.t[1] + ref_camera.R[8] * ref_camera.t[2]);
    src_C[0] = -(src_camera.R[0] * src_camera.t[0] + src_camera.R[3] * src_camera.t[1] + src_camera.R[6] * src_camera.t[2]);
    src_C[1] = -(src_camera.R[1] * src_camera.t[0] + src_camera.R[4] * src_camera.t[1] + src_camera.R[7] * src_camera.t[2]);
    src_C[2] = -(src_camera.R[2] * src_camera.t[0] + src_camera.R[5] * src_camera.t[1] + src_camera.R[8] * src_camera.t[2]);

    float R_relative[9];
    float C_relative[3];
    float t_relative[3];
    R_relative[0] = src_camera.R[0] * ref_camera.R[0] + src_camera.R[1] * ref_camera.R[1] + src_camera.R[2] *ref_camera.R[2];
    R_relative[1] = src_camera.R[0] * ref_camera.R[3] + src_camera.R[1] * ref_camera.R[4] + src_camera.R[2] *ref_camera.R[5];
    R_relative[2] = src_camera.R[0] * ref_camera.R[6] + src_camera.R[1] * ref_camera.R[7] + src_camera.R[2] *ref_camera.R[8];
    R_relative[3] = src_camera.R[3] * ref_camera.R[0] + src_camera.R[4] * ref_camera.R[1] + src_camera.R[5] *ref_camera.R[2];
    R_relative[4] = src_camera.R[3] * ref_camera.R[3] + src_camera.R[4] * ref_camera.R[4] + src_camera.R[5] *ref_camera.R[5];
    R_relative[5] = src_camera.R[3] * ref_camera.R[6] + src_camera.R[4] * ref_camera.R[7] + src_camera.R[5] *ref_camera.R[8];
    R_relative[6] = src_camera.R[6] * ref_camera.R[0] + src_camera.R[7] * ref_camera.R[1] + src_camera.R[8] *ref_camera.R[2];
    R_relative[7] = src_camera.R[6] * ref_camera.R[3] + src_camera.R[7] * ref_camera.R[4] + src_camera.R[8] *ref_camera.R[5];
    R_relative[8] = src_camera.R[6] * ref_camera.R[6] + src_camera.R[7] * ref_camera.R[7] + src_camera.R[8] *ref_camera.R[8];
    C_relative[0] = (ref_C[0] - src_C[0]);
    C_relative[1] = (ref_C[1] - src_C[1]);
    C_relative[2] = (ref_C[2] - src_C[2]);
    t_relative[0] = src_camera.R[0] * C_relative[0] + src_camera.R[1] * C_relative[1] + src_camera.R[2] * C_relative[2];
    t_relative[1] = src_camera.R[3] * C_relative[0] + src_camera.R[4] * C_relative[1] + src_camera.R[5] * C_relative[2];
    t_relative[2] = src_camera.R[6] * C_relative[0] + src_camera.R[7] * C_relative[1] + src_camera.R[8] * C_relative[2];

    H[0] = R_relative[0] - t_relative[0] * plane_hypothesis.x / plane_hypothesis.w;
    H[1] = R_relative[1] - t_relative[0] * plane_hypothesis.y / plane_hypothesis.w;
    H[2] = R_relative[2] - t_relative[0] * plane_hypothesis.z / plane_hypothesis.w;
    H[3] = R_relative[3] - t_relative[1] * plane_hypothesis.x / plane_hypothesis.w;
    H[4] = R_relative[4] - t_relative[1] * plane_hypothesis.y / plane_hypothesis.w;
    H[5] = R_relative[5] - t_relative[1] * plane_hypothesis.z / plane_hypothesis.w;
    H[6] = R_relative[6] - t_relative[2] * plane_hypothesis.x / plane_hypothesis.w;
    H[7] = R_relative[7] - t_relative[2] * plane_hypothesis.y / plane_hypothesis.w;
    H[8] = R_relative[8] - t_relative[2] * plane_hypothesis.z / plane_hypothesis.w;

    float tmp[9];
    tmp[0] = H[0] / ref_camera.K[0];
    tmp[1] = H[1] / ref_camera.K[4];
    tmp[2] = -H[0] * ref_camera.K[2] / ref_camera.K[0] - H[1] * ref_camera.K[5] / ref_camera.K[4] + H[2];
    tmp[3] = H[3] / ref_camera.K[0];
    tmp[4] = H[4] / ref_camera.K[4];
    tmp[5] = -H[3] * ref_camera.K[2] / ref_camera.K[0] - H[4] * ref_camera.K[5] / ref_camera.K[4] + H[5];
    tmp[6] = H[6] / ref_camera.K[0];
    tmp[7] = H[7] / ref_camera.K[4];
    tmp[8] = -H[6] * ref_camera.K[2] / ref_camera.K[0] - H[7] * ref_camera.K[5] / ref_camera.K[4] + H[8];

    H[0] = src_camera.K[0] * tmp[0] + src_camera.K[2] * tmp[6];
    H[1] = src_camera.K[0] * tmp[1] + src_camera.K[2] * tmp[7];
    H[2] = src_camera.K[0] * tmp[2] + src_camera.K[2] * tmp[8];
    H[3] = src_camera.K[4] * tmp[3] + src_camera.K[5] * tmp[6];
    H[4] = src_camera.K[4] * tmp[4] + src_camera.K[5] * tmp[7];
    H[5] = src_camera.K[4] * tmp[5] + src_camera.K[5] * tmp[8];
    H[6] = src_camera.K[8] * tmp[6];
    H[7] = src_camera.K[8] * tmp[7];
    H[8] = src_camera.K[8] * tmp[8];
    return H;
}

float ComputeBilateralWeight(const float x_dist, const float y_dist, const float pix, const float center_pix, const float sigma_spatial, const float sigma_color)
{
    const float spatial_dist = sqrt(x_dist * x_dist + y_dist * y_dist);
    const float color_dist = abs(pix - center_pix);
    return exp(-spatial_dist / (2.0f * sigma_spatial* sigma_spatial) - color_dist / (2.0f * sigma_color * sigma_color));
}

float ComputeBilateralNCC(const int ref_idx, const int src_idx, const ivec2 p, const vec4 plane_hypothesis)
{
    Camera src_camera = get_camera(src_idx);
    Camera ref_camera = get_camera(ref_idx);

    const float cost_max = 2.0f;
    int radius = pcs.params.patch_size / 2;

    float H[9];
    H = ComputeHomography(ref_camera, src_camera, plane_hypothesis);
    vec2 pt = ComputeCorrespondingPoint(H, p);
    if (pt.x >= src_camera.width || pt.x < 0.0f || pt.y >= src_camera.height || pt.y < 0.0f) {
        return cost_max;
    }

    float cost = 0.0f;
    {
        float sum_ref = 0.0f;
        float sum_ref_ref = 0.0f;
        float sum_src = 0.0f;
        float sum_src_src = 0.0f;
        float sum_ref_src = 0.0f;
        float bilateral_weight_sum = 0.0f;
        const float ref_center_pix = get_pixel_from_image(ref_idx, p);

        for (int i = -radius; i < radius + 1; i += pcs.params.radius_increment) {
            float sum_ref_row = 0.0f;
            float sum_src_row = 0.0f;
            float sum_ref_ref_row = 0.0f;
            float sum_src_src_row = 0.0f;
            float sum_ref_src_row = 0.0f;
            float bilateral_weight_sum_row = 0.0f;

            for (int j = -radius; j < radius + 1; j += pcs.params.radius_increment) {
                const ivec2 ref_pt = ivec2(p.x + i, p.y + j);
                const float ref_pix = get_pixel_from_image(ref_idx, ref_pt);
                vec2 src_pt = ComputeCorrespondingPoint(H, ref_pt);
                const float src_pix = get_pixel_from_image(src_idx, src_pt);

                float weight = ComputeBilateralWeight(i, j, ref_pix, ref_center_pix, pcs.params.sigma_spatial, pcs.params.sigma_color);

                sum_ref_row += weight * ref_pix;
                sum_ref_ref_row += weight * ref_pix * ref_pix;
                sum_src_row += weight * src_pix;
                sum_src_src_row += weight * src_pix * src_pix;
                sum_ref_src_row += weight * ref_pix * src_pix;
                bilateral_weight_sum_row += weight;
            }

            sum_ref += sum_ref_row;
            sum_ref_ref += sum_ref_ref_row;
            sum_src += sum_src_row;
            sum_src_src += sum_src_src_row;
            sum_ref_src += sum_ref_src_row;
            bilateral_weight_sum += bilateral_weight_sum_row;
        }
        const float inv_bilateral_weight_sum = 1.0f / bilateral_weight_sum;
        sum_ref *= inv_bilateral_weight_sum;
        sum_ref_ref *= inv_bilateral_weight_sum;
        sum_src *= inv_bilateral_weight_sum;
        sum_src_src *= inv_bilateral_weight_sum;
        sum_ref_src *= inv_bilateral_weight_sum;

        const float var_ref = sum_ref_ref - sum_ref * sum_ref;
        const float var_src = sum_src_src - sum_src * sum_src;

        const float kMinVar = 1e-5f;
        if (var_ref < kMinVar || var_src < kMinVar) {
            return cost = cost_max;
        } else {
            const float covar_src_ref = sum_ref_src - sum_ref * sum_src;
            const float var_ref_src = sqrt(var_ref * var_src);
            return cost = max(0.0f, min(cost_max, 1.0f - covar_src_ref / var_ref_src));
        }
    }
}
vec3 Get3DPointonWorld_cu(const float x, const float y, const float depth, const Camera camera)
{
    vec3 pointX;
    vec3 tmpX;
    // Reprojection
    pointX.x = depth * (x - camera.K[2]) / camera.K[0];
    pointX.y = depth * (y - camera.K[5]) / camera.K[4];
    pointX.z = depth;

    // Rotation
    tmpX.x = camera.R[0] * pointX.x + camera.R[3] * pointX.y + camera.R[6] * pointX.z;
    tmpX.y = camera.R[1] * pointX.x + camera.R[4] * pointX.y + camera.R[7] * pointX.z;
    tmpX.z = camera.R[2] * pointX.x + camera.R[5] * pointX.y + camera.R[8] * pointX.z;

    // Transformation
    vec3 C;
    C.x = -(camera.R[0] * camera.t[0] + camera.R[3] * camera.t[1] + camera.R[6] * camera.t[2]);
    C.y = -(camera.R[1] * camera.t[0] + camera.R[4] * camera.t[1] + camera.R[7] * camera.t[2]);
    C.z = -(camera.R[2] * camera.t[0] + camera.R[5] * camera.t[1] + camera.R[8] * camera.t[2]);
    pointX.x = tmpX.x + C.x;
    pointX.y = tmpX.y + C.y;
    pointX.z = tmpX.z + C.z;

    return pointX;
}

void ProjectonCamera_cu(const vec3 PointX, const Camera camera, inout vec2 point, inout float depth)
{
    vec3 tmp;
    tmp.x = camera.R[0] * PointX.x + camera.R[1] * PointX.y + camera.R[2] * PointX.z + camera.t[0];
    tmp.y = camera.R[3] * PointX.x + camera.R[4] * PointX.y + camera.R[5] * PointX.z + camera.t[1];
    tmp.z = camera.R[6] * PointX.x + camera.R[7] * PointX.y + camera.R[8] * PointX.z + camera.t[2];

    depth = camera.K[6] * tmp.x + camera.K[7] * tmp.y + camera.K[8] * tmp.z;
    point.x = (camera.K[0] * tmp.x + camera.K[1] * tmp.y + camera.K[2] * tmp.z) / depth;
    point.y = (camera.K[3] * tmp.x + camera.K[4] * tmp.y + camera.K[5] * tmp.z) / depth;
}

float ComputeDepthfromPlaneHypothesis(const Camera camera, const vec4 plane_hypothesis, const ivec2 p)
{
    return -plane_hypothesis.w * camera.K[0] / ((p.x - camera.K[2]) * plane_hypothesis.x + (camera.K[0] / camera.K[4]) * (p.y - camera.K[5]) * plane_hypothesis.y + camera.K[0] * plane_hypothesis.z);
}

uint setBit(uint x, const uint n)
{
    return x |= uint(1 << n);
}

uint isSet(uint x, const uint n)
{
    return (x >> n) & 1;
}

vec3 Get3DPoint(const Camera camera, vec2 p, float depth)
{
    vec3 result;
    result.x = depth * (p.x - camera.K[2]) / camera.K[0];
    result.y = depth * (p.y - camera.K[5]) / camera.K[4];
    result.z = depth;
    return result;
}

float GetDistance2Origin(const Camera camera, vec2 p, float depth, vec4 normal)
{
    vec3 X = Get3DPoint(camera, p, depth);
    return -(dot(normal.xyz, X));
}

vec4 GetViewDirection(const Camera camera, vec2 p, float depth)
{
    vec3 X = Get3DPoint(camera, p, depth);
    return vec4(normalize(X), 0);
}

vec4 GenerateRandomNormal(const Camera camera, vec2 p, float depth)
{
    vec4 normal;
    float q1 = 1.0f;
    float q2 = 1.0f;
    float s = 2.0f;

    while (s >= 1.0f) {
        q1 = 2.0f * rand() -1.0f;
        q2 = 2.0f * rand() - 1.0f;
        s = q1 * q1 + q2 * q2;
    }
    const float sq = sqrt(1.0f - s);
    normal.x = 2.0f * q1 * sq;
    normal.y = 2.0f * q2 * sq;
    normal.z = 1.0f - 2.0f * s;
    normal.w = 0;

    vec4 view_direction = GetViewDirection(camera, p, depth);
    float dot_product = dot(normal.xyz, view_direction.xyz);
    if (dot_product > 0.0f) {
        normal.x = -normal.x;
        normal.y = -normal.y;
        normal.z = - normal.z;
    }

    return normalize(normal);
}
