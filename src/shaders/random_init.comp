#version 450
#extension GL_GOOGLE_include_directive : enable
#include "common.comp"
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

// these can probably both be simplified using library functions
float[32] sort_small(float[32] d, const int n)
{
    int j;
    for (int i = 1; i < n; i++) {
        float tmp = d[i];
        for (j = i; j >= 1 && tmp < d[j-1]; j--)
            d[j] = d[j-1];
        d[j] = tmp;
    }
    return d;
}

float[32] sort_small_weighted(float[32] d, inout float[32] w, int n)
{
    int j;
    for (int i = 1; i < n; i++) {
        float tmp = d[i];
        float tmp_w = w[i];
        for (j = i; j >= 1 && tmp < d[j - 1]; j--) {
            d[j] = d[j - 1];
            w[j] = w[j - 1];
        }
        d[j] = tmp;
        w[j] = tmp_w;
    }
    return d;
}

vec4 TransformNormal2RefCam(const Camera camera, vec4 plane_hypothesis)
{
    vec4 transformed_normal;
    transformed_normal.x = camera.R[0] * plane_hypothesis.x + camera.R[1] * plane_hypothesis.y + camera.R[2] * plane_hypothesis.z;
    transformed_normal.y = camera.R[3] * plane_hypothesis.x + camera.R[4] * plane_hypothesis.y + camera.R[5] * plane_hypothesis.z;
    transformed_normal.z = camera.R[6] * plane_hypothesis.x + camera.R[7] * plane_hypothesis.y + camera.R[8] * plane_hypothesis.z;
    transformed_normal.w = plane_hypothesis.w;
    return transformed_normal;
}

float ComputeMultiViewInitialCostandSelectedViews(ivec2 p, vec4 plane_hypothesis, int center)
{
    float cost_max = 2.0f;
    float cost_vector[32] = init_array(2.0f);
    float cost_vector_copy[32] = init_array(2.0f);
    int cost_count = 0;
    int num_valid_views = 0;

    for (int i = 1; i < pcs.params.num_images; ++i) {
        float c = ComputeBilateralNCC(0, i, p, plane_hypothesis);
        cost_vector[i - 1] = c;
        cost_vector_copy[i - 1] = c;
        cost_count++;
        if (c < cost_max) {
            num_valid_views++;
        }
    }

    cost_vector = sort_small(cost_vector, cost_count);
    selected_views[center] = 0;

    int top_k = min(num_valid_views, pcs.params.top_k);
    if (top_k > 0) {
        float cost = 0.0f;
        for (int i = 0; i < top_k; ++i) {
            cost += cost_vector[i];
        }
        float cost_threshold = cost_vector[top_k - 1];
        for (int i = 0; i < pcs.params.num_images - 1; ++i) {
            if (cost_vector_copy[i] <= cost_threshold) {

                selected_views[center] = setBit(selected_views[center], i);
            }
        }
        return cost / top_k;
    } else {
        return cost_max;
    }
}

vec4 GenerateRandomPlaneHypothesis(const Camera camera, vec2 p, int center, float depth_min, float depth_max)
{
    float depth = rand(center) * (depth_max - depth_min) + depth_min;
    vec4 plane_hypothesis = GenerateRandomNormal(camera, p, center, depth);
    plane_hypothesis.w = GetDistance2Origin(camera, p, depth, plane_hypothesis);
    return plane_hypothesis;
}


void RandomInitialization() {
    ivec2 p = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    Camera ref_camera = get_camera(0);
    int width = int(ref_camera.width);
    int height = int(ref_camera.height);

    if (p.x >= width || p.y >= height) {
        return;
    }

    int center = int(p.y * width + p.x);
    // random_states[center] = 0.75;

    if (!pcs.params.geom_consistency) {
        plane_hypotheses[center] = GenerateRandomPlaneHypothesis(ref_camera, p, center, pcs.params.depth_min, pcs.params.depth_max);
        costs[center] = ComputeMultiViewInitialCostandSelectedViews(p, plane_hypotheses[center], center);
    }
    else {
        vec4 plane_hypothesis = plane_hypotheses[center];
        plane_hypothesis = TransformNormal2RefCam(ref_camera, plane_hypothesis);
        float depth = plane_hypothesis.w;
        plane_hypothesis.w = GetDistance2Origin(ref_camera, p, depth, plane_hypothesis);
        plane_hypotheses[center] = plane_hypothesis;
        costs[center] = ComputeMultiViewInitialCostandSelectedViews(p, plane_hypotheses[center], center);
    }
}

void main() {
    RandomInitialization();
}
